from g4f.client import Client
from tkinter import *
from tkinter import ttk
from datetime import datetime, timedelta
import requests
from bs4 import BeautifulSoup

win = Tk()
win.title("Pogoda Program")
win.geometry("600x300")
win.resizable(False, False)
win.configure(bg='#f0f8ff')

def get_into():
    info1 = ent.get()
    into2 = combo.get()
    info3 = ent2.get()

    days_ua = {
        "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": 0,
        "–í—ñ–≤—Ç–æ—Ä–æ–∫": 1,
        "–°–µ—Ä–µ–¥–∞": 2,
        "–ß–µ—Ç–≤–µ—Ä": 3,
        "–ü'—è—Ç–Ω–∏—Ü—è": 4,
        "–°—É–±–æ—Ç–∞": 5,
        "–ù–µ–¥—ñ–ª—è": 6
    }

    days_ua_url = {
        0: "ponedilok",
        1: "vivtorok",
        2: "sereda",
        3: "chetver",
        4: "pyatnytsya",
        5: "subota",
        6: "nedilya"
    }

    day_input = combo.get()
    if day_input in days_ua:
        today = datetime.today()
        today_weekday = today.weekday()
        target_weekday = days_ua[day_input]
        days_ahead = (target_weekday - today_weekday) % 7
        target_date = today + timedelta(days=days_ahead)
        nap3.config(text="–î–∞—Ç–∞: " + target_date.strftime('%d.%m.%Y'))
    else:
        print("–ù–µ–≤—ñ—Ä–Ω–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è")
        return

    user_date = target_date.strftime('%d.%m.%Y')

    def get_sinoptik_weather_by_date(input_date_str):
        try:
            date = datetime.strptime(input_date_str, "%d.%m.%Y")
            weekday_number = date.weekday()
            formatted_date = date.strftime("%Y-%m-%d")

            if date.date() == datetime.now().date():
                url = "https://sinoptik.ua/pohoda/chernihiv"
            else:
                day_part = days_ua_url.get(weekday_number, "")
                url = f"https://sinoptik.ua/pohoda/chernihiv/{day_part}"

            headers = {"User-Agent": "Mozilla/5.0"}
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
        except ValueError:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏")
            return None
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—ñ: {e}")
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        general_forecast = soup.select_one("p.GVzzzKDV")
        if general_forecast:
            nap5.config(text=general_forecast.text.strip())
        else:
            nap5.config(text="‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑.")
            return None

        hours = ['00:00', '03:00', '06:00', '09:00', '12:00', '15:00', '18:00', '21:00']
        temp_blocks = [el.text.strip() for el in soup.select("td.lgo8NaQM") if "¬∞" in el.text.strip()]
        temp_blocks = temp_blocks[:8]
        weather_icons = soup.select("td.lgo8NaQM div[aria-label]")
        weather_conditions = [icon['aria-label'].strip() for icon in weather_icons[:8]]

        if len(temp_blocks) == 8 and len(weather_conditions) == 8:
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ –¥–∞–Ω—ñ
            return hours[4], temp_blocks[4], weather_conditions[4], general_forecast.text.strip()
        else:
            print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –≤—Å—ñ –ø–æ–≥–æ–¥–Ω—ñ –¥–∞–Ω—ñ.")
            return None

    result = get_sinoptik_weather_by_date(user_date)
    if result:
        a, b, c, d = result
        
        client = Client()
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {
                    "role": "user",
                    "content": f"–ü—Ä–∏–≤—ñ—Ç, —É—è–≤–∏ —â–æ —Ç–∏ —á–∞—Å—Ç–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏. "
                               f"–¢–æ–±—ñ –≤–∏–¥–∞—é—Ç—å —Ç–∞–∫—ñ –¥–∞–Ω—ñ: —á–∞—Å ‚Äî {a}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî {b}, –ø–æ–≥–æ–¥–∞ ‚Äî {c}. "
                               f"–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ ‚Äî {d}. –ß–∞—Å –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ ‚Äî  {info1}–≥–æ–¥–∏–Ω–∏ {info3} —Ö–≤–∏–ª–∏–Ω–∏. "
                               f"–í–∏—Ä–∞—Ö—É–π –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ –Ω–∞ —Å–≤—ñ–∂–æ–º—É –ø–æ–≤—ñ—Ç—Ä—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å–≤—ñ—Ç–∞–Ω–∫—É, –∑–∞—Ö–æ–¥—É —Å–æ–Ω—Ü—è, —Ç–æ—â–æ, —è–∫—â–æ —Ü—ñ–ª–∏–π –¥–µ–Ω—å –¥–æ—â —Ç–æ —Å–∫–∞–∂–∏ —â–æ –∫—Ä–∞—â–µ —Å—å–æ–≥–æ–¥–Ω—ñ –Ω–µ –π—Ç–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª—è–Ω–∫—É "
                               f"–ù–∞–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: '–ó–∞ –º–æ—ó–º–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–∞–º–∏ –Ω–∞–π–∫—Ä–∞—â–∏–π —á–∞—Å –¥–ª—è –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ ‚Äî –∑ ... –¥–æ ...' —ñ –±—ñ–ª—å—à–µ –Ω—ñ—è–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å —Ç—ñ–ª—å–∫–∏ –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º"
                }
            ]
        )
        print(response.choices[0].message.content)
        nap6.config(text=response.choices[0].message.content)

        but = Button(win, text="‚Æï", font=('Comic Sans MS', 10), width=3, height=1, command=gpt, bg='#add8e6')
        but.place(relx=0.94, rely=0.88)
def gpt():
    
    
    win = Tk()
    win.title("–í–∏–ø–∏—Å–∫–∞ –ø–æ–≥–æ–¥–∏")
    
    win.mainloop()


        
       
        

# GUI
nap = Label(win, font=('Comic Sans MS', 18), text="–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å —Ç–∏–∂–Ω—è", bg='#f0f8ff')
nap.place(relx=0.04, rely=0.1)

nap2 = Label(win, font=('Comic Sans MS', 18), text="–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Å—É", bg='#f0f8ff')
nap2.place(relx=0.04, rely=0.3)

ent = Entry(win, font=('Comic Sans MS', 18), width=4)
ent.place(relx=0.1, rely=0.45)

ent2 = Entry(win, font=('Comic Sans MS', 18), width=4)
ent2.place(relx=0.3, rely=0.45)

Label(win, font=('Comic Sans MS', 18), text="–≥–æ–¥", bg='#f0f8ff').place(relx=0.2, rely=0.45)
Label(win, font=('Comic Sans MS', 18), text="—Ö–≤", bg='#f0f8ff').place(relx=0.42, rely=0.45)

but = Button(win, text="–ü—Ä–æ–≤–µ—Å—Ç–∏ –∑–∞–º—ñ—Ä–∏", font=('Comic Sans MS', 18), width=16, height=1, command=get_into, bg='#add8e6')
but.place(relx=0.07, rely=0.65)

nap3 = Label(win, font=('Comic Sans MS', 18), text="–î–∞—Ç–∞: ", bg='#f0f8ff')
nap3.place(relx=0.55, rely=0.1)

nap4 = Label(win, font=('Comic Sans MS', 18), text="üìù –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:", bg='#f0f8ff')
nap4.place(relx=0.45, rely=0.2)
nap4 = Label(win, font=('Comic Sans MS', 18), text="–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏:", bg='#f0f8ff')
nap4.place(relx=0.53, rely=0.6)


nap5 = Message(win, font=('Comic Sans MS', 10), text="", bg='#f0f8ff', width=250)
nap5.place(relx=0.5, rely=0.3)

nap6 = Message(win, font=('Comic Sans MS', 10), text="", bg='#f0f8ff', width=250)
nap6.place(relx=0.53, rely=0.7)

options = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞", "–ù–µ–¥—ñ–ª—è"]
combo = ttk.Combobox(win, values=options, font=('Comic Sans MS', 14), width=15)
combo.set("–û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç")
combo.place(relx=0.1, rely=0.22)

def on_select(event):
    q = combo.get()
    print(f"–í–∏ –≤–∏–±—Ä–∞–ª–∏: {q}")

combo.bind("<<ComboboxSelected>>", on_select)

win.mainloop()
